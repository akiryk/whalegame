import mx.transitions.Tween;import com.robertpenner.easing.*;import AsBroadcaster;class Elephant {		// PROPERTIES	private var elephant_mc:MovieClip;	private var elephantBalloons_mc:MovieClip;		private var myXListener:Object;	private var myYListener:Object;		//public var balloon_array:Array; // List of balloons in current existence	private var totalBalloons:Number; // Original number of balloons. 	private var increment:Number; // increment by which whale falls with each hit		// TWEEN OBJECTS	private var yTween:Object;		// MOVER OBJECT	private var xMover:Mover;	private var speed:Number;	private var func:Function;		// LISTENER	private var events:Object;		private var col:CollisionManager;		// STATIC PROPERTIES (properties of the class itself)	private static var start_y:Number;	private static var highPoint:Number; // the _y place where elephant starts		/*  // *************************	CONSTRUCTOR  // *************************	*/	public function Elephant(target:MovieClip, level:Number) {		events = new Object();		AsBroadcaster.initialize(events); 				elephantBalloons_mc = target.createEmptyMovieClip("ele", 1);		elephant_mc = elephantBalloons_mc.attachMovie("elephant", "elephant"+1, 1);		elephant_mc.obj = this;		highPoint = 170;		// manage balloons		var balloons = level +2		totalBalloons = balloons;		addBalloons(level);				if (level < 3){			speed = 2;		} else {			speed = 3;		}		func = Cubic.easeInOut;			// create the increment by which whale falls with each hit		increment = 300/totalBalloons; // 450 is the zone of _y motion (from about 150 to 600)				// place Elephant		setPosition();				// Start _y motion		setYTween();				// Start _x motion		setMover();	}   	/*******************	BROADCAST/LISTEN FUNCTIONS	********************/	public function addListener(listener:Object){		events.addListener(listener);	}		public function removeListener(listener:Object){		events.removeListener(listener);	}					// *************************	// LISTENER FUNCTIONS	// *************************		private function onGoneOffScreen():Void {		xMover.destroy();		delete xMover;		events.broadcastMessage("onGoneOffScreen");	}		private function onSunk():Void {		xMover.destroy();		delete xMover;		events.broadcastMessage("onSunk");	}	  	public function onPoke(mc:MovieClip):Void {		for (var i:Number = 0; i < col.getLength(); i++){ // cycle through list of objects in collision manager			if (mc.hitTest(col.getIndex(i).getBalloon())) {				// slow down the x motion				var newvx = 0.9 * xMover.getVelX();				xMover.changeVel(newvx, 0);				// remove balloon				col.removeBalloon(i);				var pop:Sounds = new Sounds("pop");				pop.killSound();				delete pop;				//delete balloon_array[i];				//balloon_array.splice(i, 1);				descend();				break;			}		}	}		private function onStartSinking():Void {		xMover.setToSinking();;	}		private function addBalloons(level:Number):Void {		// set random placement of balloons		var rx:Number, ry:Number, vx:Number, vy:Number, rad:Number;		var b:TiedBalloon;		col = new CollisionManager(_root);		if (level > 6) level = 6;		// create balloons		for (var i:Number = 0; i < totalBalloons; i++){			ry = Math.floor(Math.random() *120 - 60);			rx = Math.floor(Math.random() *100);			vx = Math.random() * 8 - 4;			vy = Math.random() * 6 - 2;			rad = 50 - level * 5;			b = new TiedBalloon(rx, ry, vx, vy, elephantBalloons_mc.createEmptyMovieClip("m" + i, i+3), -1, 160, rad);			col.addObject(b);		}		col.startCheck();	}		public function descend():Void {		var m:Number = totalBalloons - col.getLength();		if (m == totalBalloons){ // that is, if all balloons are gone			destroyYTween();			// update xMover position so that it knows what _y is; otherwise, it thinks _y is 150 since it hasn't been updated			xMover.changePos(xMover.getPosX(), elephantBalloons_mc._y);			xMover.changeVel(0, 3);			xMover.changeAccel(0,3);		} else {			// Descend to next lower level			start_y =  highPoint + (m * increment);			finitY(start_y);		}	}		private function setYTween(n:Number):Void{		var ry, rt, ychange;		if (n== undefined){			ychange = Math.floor(Math.random() * 70 - 35);			ry = start_y + ychange;			rt =  Math.floor((Math.abs(ychange) + 10));		}  else {			ry = n;			rt = 8;		}		//var func:Function = Elastic.easeInOut;		yTween = new Tween(elephantBalloons_mc, "_y", func, elephantBalloons_mc._y, ry, 50, false); //obj, prop, func, begin, finish, duration, useSeconds		addYTweenListener();	}				private function addYTweenListener():Void {		var elephant = this; 		myYListener = new Object();		myYListener.onMotionFinished = function () {			elephant.finitY();		}		yTween.addListener(myYListener);	}			private function finitY(n:Number):Void {		destroyYTween();		setYTween(n);	}		private function destroyYTween():Void {		yTween.stopEnterFrame();		yTween.removeListener(myYListener);		delete myYListener;		delete yTween;	}		private function setPosition():Void {		elephantBalloons_mc._x =-60;		start_y = highPoint;//Math.random() * 150 + 150;		elephantBalloons_mc._y = start_y;	}		private function setMover():Void {		xMover = new Mover(elephantBalloons_mc._x, elephantBalloons_mc._y, speed, 0, 0, 0, null, null, elephantBalloons_mc);		// xpos, ypos, velx, vely, accelx, accely, xfricion, yfriction, mc		xMover.setThreshold(950,400);		xMover.addListener(this);	}			public function destroy():Void {		delete elephantBalloons_mc.onEnterFrame;		elephantBalloons_mc.removeMovieClip();		delete col;		destroyYTween();	}	}