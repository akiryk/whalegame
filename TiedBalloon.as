class TiedBalloon extends BuoyantObject implements MoveManager {	/****************	TiedBalloon simulates a balloon that is tied to something -- e.g. a pole or a hand. It is not a floating balloon.	TiedBalloons can float around within a circular area delineated by the length of the string that holds them. That is, the string length	is the radius of an imaginary circle that surrounds each balloon.		TiedBalloon implements MoveManager to insure it provides certain methods needed by the CollisionManager. These methods allow	the CollisionManager to control each balloons movements based on collisions with the outer world boundary (the imaginary circle)	or other balloons.	*****************/	private var stringLength:Number; // corresponds to radius of an imaginary circle that represents outer limit of where travel from point where it is tied	private var centerPos:Vector; // point where balloon is tied -- this may not be necessary since it should always be 0x, 0y.	private var radius:Number; // radius of balloon (not including string)	public function TiedBalloon(xpos:Number, ypos:Number, xvel:Number, yvel:Number, mc:MovieClip, b:Number, len:Number, radius:Number){		super (xpos, ypos, xvel, yvel, 0, b, mc, radius); // xpos, ypos, vel, vel, accel, accel, mc, coefficient of restitution		this.centerPos = new Vector (0, 0); // point where balloon is tied		attachString();		attachBalloon();		this._mc.balloon._width = radius * 2;		this._mc.balloon._height = radius * 2 + 5;		this.stringLength = len;		this.radius = radius;	}		private function attachString():Void {		this._mc.createEmptyMovieClip("string", 1);		drawString();	}		private function attachBalloon():Void {		this._mc.attachMovie("balloon", "balloon", 2);		this._mc.balloon._x = pos.x;		this._mc.balloon._y = pos.y;		this._mc.balloon.obj = this;	}		private function drawString():Void {		this._mc.string.clear();		this._mc.string.lineStyle(1, 0x666666, 100 );		this._mc.string.moveTo(0,0);		this._mc.string.lineTo(pos.x, pos.y);	}		public function getOverlap():Number {		// returns true of balloon is at end of string		var maxDistance:Number = stringLength - radius;		var len:Number = Trig.getDistByV(pos, centerPos); // calculates distance between two points		return len - maxDistance; // If this number is greater than 0, we have penetration. 	}		public function render():Void {		drawString();		this._mc.balloon._x = pos.x;		this._mc.balloon._y = pos.y;	}		public function updateVel():Void {		vel.plus(accel);	}		public function growVel(dx:Number, dy:Number):Void {		vel.x += dx;		vel.y += dy;	}		public function scaleVel(sx:Number, sy:Number):Void {		vel.x *= sx;		vel.y *= sy;	}		public function updatePos():Void {		pos.plus(vel);	}		public function growPos(dx:Number, dy:Number):Void {		pos.x += dx;		pos.y += dy;	}		/************************************	Getter and Setter functions	These be will used by the collision manager	An instance of TiedBalloon will not update it's own motions -- it will have its updater function called	by CollisionManager	***********************************/		public function getPos():Vector {		return pos;	}	public function getVel():Vector {		return vel;	}		public function getAccel():Vector {		return accel;	}		public function getBuoyancy():Number {		return buoyancy;	}	public function getTheta(v:Vector):Number {		// returns angle of balloon from center point in radians		return Math.atan2 (v.y, v.x);	}		public function getRadius():Number {		return radius;	}		public function getMass():Number{		return m;	}		public function setXpos(x:Number):Void {		pos.x = x;	}		public function setYpos(y:Number):Void {		pos.y = y;	}		public function setVel(x:Number, y:Number):Void {		this.vel.x = x;		this.vel.y = y;	}		public function setXvel(x:Number):Void {		//if (Math.abs(x) < 10 ) {			vel.x = x;			}		public function setYvel(y:Number):Void {		vel.y = y;	}	public function getBalloon():MovieClip {		return this._mc.balloon;	}	public function destroy():Void {		this._mc.removeMovieClip();	}		}